@page "/Account/Login"
 
<EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="login" Enhance>
    <div class="card border-primary shadow-lg text-dark p-5" style="border-radius:25px">
        <div class="card-header text-dark fs-4 border-primary">Login</div>
        <div class="card-body" style="opacity:1">
            <DataAnnotationsValidator />
            <div class="form-folating mb-3">
                <InputText @bind-Value="LoginModel.Email" class="form-control"  ></InputText>
                <label for="email" class="form-label">Email Addresss</label>
            </div>
            <div class="form-folating mb-3">
                <InputText type="password" @bind-Value="LoginModel.Password" class="form-control" ></InputText>
                <label for="password" class="form-label">User Password</label>
            </div>
            <div class="form-group align-content-end">
                <button class="float-end btn btn-success mt-4 w-50" type="submit">Login</button>
            </div>
            <hr class="text-primary" />
        </div>
        <div class="card-footer mt-5">
            @if (@ErrorMessage != "")
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }
            else
            {
                <ValidationSummary class="form-control text-danger text-decoration-none"></ValidationSummary>
            }

        </div>
    </div>

</EditForm>


@code {
    public string ErrorMessage = "";
    public bool IsBusy { get; set; } = false;

    [SupplyParameterFromForm]
    private LoginUserRequestDTO LoginModel { get; set; } = new();

    private async Task LoginAsync()
    {
        if (IsBusy) return;
        ErrorMessage = "";
        IsBusy = true;
        var response = await accountService.LoginAsync(LoginModel);
        if (!response.flag)
        {
            IsBusy = false;
            ErrorMessage = response.message;
            return;
        }
        IsBusy = false;
        NavManager.NavigateTo(uri: "app/home", true);

    }
    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
                NavManager.NavigateTo("app/home", false, true);

        }
        catch
        {

        }
    }

}
